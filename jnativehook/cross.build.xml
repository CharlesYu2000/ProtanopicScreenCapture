<?xml version="1.0" encoding="UTF-8"?>

<!--
JNativeHook: Global keyboard and mouse hooking for Java.
Copyright (C) 2006-2017 Alexander Barker.  All Rights Received.
https://github.com/kwhat/jnativehook/

JNativeHook is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

JNativeHook is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="cross-compile" default="all" basedir=".">
	<!-- Project Settings -->
	<property file="build.num" />
	<tstamp>
		<format property="ant.build.date" pattern="yyyyMMdd" />
	</tstamp>
	<property name="ant.build.revision" value="${ant.build.date}" />

	<property file="cross.build.properties" />
	<property environment="env" />

	<!-- Path Settings -->
	<property name="dir.maven" value="${basedir}/maven" />
	
	<!-- Class Path Settings -->
	<path id="ant.project.class.path">
		<fileset dir="${basedir}">
			<include name="*.jar" />
		</fileset>

		<pathelement path="${java.class.path}" />
	</path>
	
	<target name="configure" description="Initialize local build environment.">
		<echo>Initializing local build environment...</echo>
		
		<!-- Set a few static properties for the project. -->
		<property name="ant.build.debug" value="true" />
		<property name="ant.build.javac.compiler" value="modern" />
		<property name="ant.build.javac.source" value="1.5" />
		<property name="ant.build.javac.target" value="1.5" /> 

		<!-- Preform download target checks. -->
		<available file="jnitasks/build.xml" property="project.check.jnitasks.download" />
		<available file="jnativehook/build.xml" property="project.check.jnativehook.download" />

		<!-- Try to locate the rt.jar location for ant.build.javac.bootclasspath -->
		<condition property="ant.build.javac.bootclasspath" value="${env.JDK_HOME}/jre/lib/rt.jar">
			<available file="${env.JDK_HOME}/lib/rt.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${env.JAVA_HOME}/lib/rt.jar">
			<available file="${env.JAVA_HOME}/lib/rt.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${java.home}/lib/rt.jar">
			<available file="${java.home}/lib/rt.jar" type="file" />
		</condition>

		<condition property="ant.build.javac.bootclasspath" value="${env.JDK_HOME}/bundle/Classes/classes.jar">
			<available file="${env.JDK_HOME}/bundle/Classes/classes.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${env.JAVA_HOME}/bundle/Classes/classes.jar">
			<available file="${env.JAVA_HOME}/bundle/Classes/classes.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${java.home}/bundle/Classes/classes.jar">
			<available file="${java.home}/bundle/Classes/classes.jar" type="file" />
		</condition>

		<fail message="Could not determine ant.build.javac.bootclasspath location.  Please set your JDK_HOME / JAVA_HOME environment variable or manually set the ant.build.javac.bootclasspath property to the location of your rt.jar file.">
			<condition>
				<not>
					<or>
						<isset property="ant.build.javac.bootclasspath" />
						<available file="${ant.build.javac.bootclasspath}" type="file" />
					</or>
				</not>
			</condition>
		</fail>
		<echo level="info">Found Java lib location: ${ant.build.javac.bootclasspath}</echo>

		<property name="ant.build.javac.args" value="-bootclasspath ${ant.build.javac.bootclasspath} -Xlint:-options" />
		
		<!-- Try to locate the env path variable -->
		<condition property="native.path" value="">
			<isset property="env.PATH" />
		</condition>
		<condition property="native.path" value="${env.Path}">
			<isset property="env.Path" />
		</condition>
		<condition property="native.path" value="${env.path}">
			<isset property="env.path" />
		</condition>

		<!-- Check for clang before assuming gcc toolchain. -->
		<condition property="ant.build.native.toolchain" value="clang" else="gcc">
			<and>
				<available filepath="${env.PATH};${env.Path};${env.path}" file="clang" type="file" />
				<not>
					<available filepath="${env.PATH};${env.Path};${env.path}" file="gcc" type="file" />
				</not>
			</and>
		</condition>

		<!-- Create property file for the descovered values. -->
		<propertyfile file="cross.build.properties" comment="Auto-generated by ant configure">
			<entry key="ant.build.debug" value="${ant.build.debug}" />
			<entry key="ant.build.javac.compiler" value="${ant.build.javac.compiler}" />
			<entry key="ant.build.javac.source" value="${ant.build.javac.source}" />
			<entry key="ant.build.javac.target" value="${ant.build.javac.target}" />
			<entry key="ant.build.javac.args" value="${ant.build.javac.args}" />
		</propertyfile>
	</target>


	<target name="clean" description="Removes downloaded project files.">
		<delete dir="jnativehook" includeEmptyDirs="true" verbose="true" failonerror="false" />
		
		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="jnitasks" />
            <fileset file="jnitasks-0.2.zip" />
            
			<fileset dir="${dir.maven}" />
			<fileset file="cross.build.properties" />

			<fileset file="pom.xml*" />
		</delete>
	</target>


	<target name="download-jnitasks" depends="configure" unless="project.check.jnitasks.download" description="Download and initialize the JNITasks library.">
		<echo>Downloading JNITasks source...</echo>
		<mkdir dir="${basedir}/jnitasks" />

		<get src="https://github.com/kwhat/jnitasks/archive/0.2.zip" dest="jnitasks-0.2.zip" verbose="true" />

		<unzip src="jnitasks-0.2.zip" dest="${basedir}/jnitasks">
			<mapper type="glob" from="jnitasks-0.2/*" to="*"/>
		</unzip>
		
		<!-- Fix clock skew. -->
		<touch>
			<fileset dir="jnitasks" includes="**/*" />
		</touch>
	</target>

	<target name="compile-jnitasks" depends="download-jnitasks" description="Build the JNITasks library.">
		<echo>Compiling JNITasks source...</echo>
		<mkdir dir="${basedir}/jnitasks" />

		<ant antfile="${basedir}/jnitasks/build.xml" dir="${basedir}/jnitasks">
			<target name="compile" />
			<target name="jar" />
			
			<!-- We need to override the src and bin locations. -->
			<property name="dir.bin" value="${basedir}/jnitasks/bin" />
			<property name="dir.src" value="${basedir}/jnitasks/src" />
			<property name="dir.jar" value="${basedir}" />

			<!-- Set a few of the configurable properties. -->
			<property name="ant.build.debug" value="${ant.build.debug}" />
			<property name="ant.build.javac.compiler" value="${ant.build.javac.compiler}" />
			<property name="ant.build.javac.source" value="${ant.build.javac.source}" />
			<property name="ant.build.javac.target" value="${ant.build.javac.target}" />
			<property name="ant.build.javac.args" value="${ant.build.javac.args}" />
		</ant>
	</target>


	<!-- Note: This target is called recursivly from the compile task with the aproprate properties. -->
	<target name="-compile-cross" description="Cross compile the native portions of the project.">
		<fail message="You must set ant.build.native.host to cross compile.">
			<condition>
				<not>
					<isset property="ant.build.native.host" />
				</not>
			</condition>
		</fail>
		
		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="bin/libuiohook" />
			<fileset dir="bin/obj" />
			<fileset dir="bin/lib" />
		</delete>
		
		<echo>Compiling for ${ant.build.native.host}...</echo>
		<ant antfile="build.xml" dir="${basedir}" inheritAll="true">
			<target name="compile-libuiohook" />
			<target name="compile-jni" />
		</ant>
	</target>


	<target name="compile" depends="compile-jnitasks" description="Compiles both Java and C source files.">
		<ant antfile="build.xml" dir="${basedir}" inheritAll="false">
			<target name="compile-java" />
			<target name="bootstrap-libuiohook" />

			<property name="ant.build.javac.source" value="${ant.build.javac.source}" />
			<property name="ant.build.javac.target" value="${ant.build.javac.target}" />
			
			<property name="ant.build.javac.args" value="-bootclasspath ${ant.build.javac.bootclasspath}" />
		</ant>

		<ant antfile="cross.build.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="targets/armv6j-hardfloat-linux-gnueabihf.properties" />
		</ant>

		<ant antfile="cross.build.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="targets/x86_64-w64-mingw32.properties" />
		</ant>
		
		<ant antfile="cross.build.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="targets/x86_64-pc-linux-gnu.properties" />
		</ant>
		
		<ant antfile="cross.build.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="targets/x86_64-apple-darwin9.properties" />
		</ant>
		
		<ant antfile="cross.build.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="targets/i586-w32-mingw32.properties" />
		</ant>
		
		<ant antfile="cross.build.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="targets/i586-pc-linux-gnu.properties" />
		</ant>
		
		<ant antfile="cross.build.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="targets/i586-apple-darwin9.properties" />
		</ant>
	</target>
	
	
	<target name="package" depends="" description="Creates zip files for distribution.">

		<ant antfile="build.xml" dir="${basedir}" target="package" inheritAll="false">
			<property name="ant.build.major" value="${ant.build.major}" />
			<property name="ant.build.minor" value="${ant.build.minor}" />
			<property name="ant.build.revision" value="${ant.build.revision}" />
		</ant>
	</target>
	
	<target name="maven" description="Creates files required for maven deployment.">
		<!-- Define the Maven Ant tasks provided by classpathref. -->
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml" classpathref="ant.project.class.path" onerror="failall" />
		
		<!-- Check to see if the build revision matches the date to see if this is a snapshot deployment. -->
		<condition property="maven.pom.version" value="${ant.build.major}.${ant.build.minor}.SNAPSHOT" else="${ant.build.major}.${ant.build.minor}.${ant.build.revision}">
			<equals arg1="${ant.build.date}" arg2="${ant.build.revision}"/>
		</condition>
		<condition property="maven.repository.url" value="https://oss.sonatype.org/content/repositories/snapshots" else="https://oss.sonatype.org/service/local/staging/deploy/maven2">
			<equals arg1="${ant.build.date}" arg2="${ant.build.revision}"/>
		</condition>

		<!-- This is the server id in the Maven .m2/settings.xml file. -->
		<property name="maven.repository.id" value="ossrh" />
		
		<property name="maven.jar.base" value="jnativehook-${ant.build.major}.${ant.build.minor}" />

		<echo>Creating jars for Maven deployment...</echo>
		<mkdir dir="${dir.maven}" />
		<delete verbose="true" failonerror="false">
			<fileset dir="${dir.maven}" includes="**/*" />
		</delete>

		<copy file="${basedir}/jar/jnativehook-${ant.build.major}.${ant.build.minor}.${ant.build.revision}.jar" tofile="${dir.maven}/${maven.jar.base}.jar"/>
		
		<jar jarfile="${dir.maven}/${maven.jar.base}-sources.jar" basedir="${basedir}" update="true" compress="true" level="9">
			<include name="targets/**/*.properties" />

			<include name="src/java/**/*" />
			<include name="src/jni/**/*" />
			<include name="src/test/**/*" />
			<exclude name="src/jni/include/org_jnativehook_GlobalScreen.h" />
			<exclude name="src/jni/include/org_jnativehook_GlobalScreen_EventDispatchTask.h" />
			<exclude name="src/jni/include/org_jnativehook_GlobalScreen_NativeHookThread.h" />

			<include name="src/libuiohook/include/uiohook.h" />
			<include name="src/libuiohook/m4/ax_*.m4" />
			<include name="src/libuiohook/man/*" />
			<include name="src/libuiohook/pc/uiohook.pc.in" />
			<include name="src/libuiohook/src/**/*" />
			<include name="src/libuiohook/test/**/*" />

			<include name="src/libuiohook/AUTHORS" />
			<include name="src/libuiohook/bootstrap.sh" />
			<include name="src/libuiohook/*.am" />
			<include name="src/libuiohook/*.md" />
			<include name="src/libuiohook/*.ac" />

			<include name="build.num" />
			<include name="build.xml" />
			<include name="cross.build.xml" />
			<include name="AUTHORS" />
			<include name="*.md" />
		</jar>

		<jar jarfile="${dir.maven}/${maven.jar.base}-javadoc.jar" basedir="${basedir}/doc" update="true" compress="true" level="9">
			<include name="**/*" />
		</jar>
		
		<echo>Creating pom.xml file...</echo>
		<pom
			id="maven.pom.id"
			groupId="com.1stleg"
			artifactId="jnativehook"
			version="${maven.pom.version}"
			name="JNativeHook"
			description="Global keyboard and mouse listeners for Java."
			url="https://github.com/kwhat/jnativehook"
		>
			<license name="GNU General Public License (GPL), Version 3.0" url="https://www.gnu.org/licenses/gpl-3.0.txt" />
			<license name="GNU Lesser General Public License (LGPL), Version 3.0" url="https://www.gnu.org/licenses/lgpl-3.0.txt" />

			<developer name="Alexander Barker" email="alex@1stleg.com" organization="Personal" organizationurl="https://github.com/kwhat/" />

			<scm
				connection="scm:git:git@github.com:kwhat/jnativehook.git"
				developerconnection="scm:git:git@github.com:kwhat/jnativehook.git"
				url="git@github.com:kwhat/jnativehook.git" />
		</pom>
		<writepom pomRefId="maven.pom.id" file="pom.xml" trim="true" />

		<echo>Create GPG signatures and deploy jars...</echo>
		<!-- Maven Version is required because gentoo doesnt support maven, again. -->
		<mvn mavenVersion="2.2.1">
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.6:sign-and-deploy-file" />
			<arg value="-Durl=${maven.repository.url}" />
			<arg value="-DrepositoryId=${maven.repository.id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${dir.maven}/${maven.jar.base}.jar" />
			<arg value="-Pgpg" />
		</mvn>

		<mvn mavenVersion="2.2.1">
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.6:sign-and-deploy-file" />
			<arg value="-Durl=${maven.repository.url}" />
			<arg value="-DrepositoryId=${maven.repository.id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${dir.maven}/${maven.jar.base}-sources.jar" />
			<arg value="-Dclassifier=sources" />
			<arg value="-Pgpg" />
		</mvn>
		
		<mvn mavenVersion="2.2.1">
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.6:sign-and-deploy-file" />
			<arg value="-Durl=${maven.repository.url}" />
			<arg value="-DrepositoryId=${maven.repository.id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${dir.maven}/${maven.jar.base}-javadoc.jar" />
			<arg value="-Dclassifier=javadoc" />
			<arg value="-Pgpg" />
		</mvn>
	</target>
	
	<target name="all" depends="compile,package" description="Compile all source files and create the jar library.">
	</target>
</project>
